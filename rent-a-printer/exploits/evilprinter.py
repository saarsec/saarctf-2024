import io
import os
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
from threading import Thread

import cv2
import numpy
from flask import Flask
from pypdf import PdfReader

from db import models
from db.models import Job
from db.repository import DbRepository
from printer import printers
from printer.backends import PrinterBackend
from printer.factory import PrinterFactory
from printer.job_queue import JobQueue
from printer.printers import Printer
from views.ipp_server import IppView


class FlagPrinterBackend(PrinterBackend):
    """print all flags to stdout, including QR codes"""

    def print_job(self, job: Job) -> None:
        detector1 = cv2.QRCodeDetector()
        detector2 = cv2.QRCodeDetectorAruco()
        print(f'... parsing document from job {job.id} ({job.doctype}) ...')
        reader = PdfReader(io.BytesIO(job.document))
        for page in reader.pages:
            # read text
            print(page.extract_text())
            # read QR codes
            for img in page.images:
                image = cv2.imdecode(numpy.frombuffer(img.data, dtype=numpy.uint8), flags=cv2.IMREAD_ANYCOLOR)
                data, _, _ = detector1.detectAndDecode(image)
                if data is not None and data:
                    print('From QR (1):', data)
                # reverse image colors
                image = 255 - image
                data, _, _ = detector1.detectAndDecode(image)
                if data is not None and data:
                    print('From QR (2):', data)
                data, _, _ = detector2.detectAndDecode(image)
                if data is not None and data:
                    print('From QR (3):', data)


class StdoutPrinter(Printer):
    def __init__(self, name: str) -> None:
        # dummy repo + models
        self.repo = DbRepository(Path(':memory:'))
        user = models.User(0, 'EvilUser', 'aaa')
        self.repo.users.store(user)
        model = models.Printer(0, name, user, [], [])
        self.repo.printers.store(model)

        # dummy queue
        queue = JobQueue(self.repo, model, FlagPrinterBackend(), ThreadPoolExecutor(max_workers=1))
        super().__init__(name, queue)


class EvilPrinterFactory(PrinterFactory):
    """Mocked factory that uses our evil printer for any request"""

    def __init__(self, printer: Printer) -> None:
        self.printer = printer

    def get(self, name: str) -> printers.Printer:
        return self.printer


def host_printer_in_background(printer: StdoutPrinter, port: int) -> None:
    # fixup logging
    os.chdir('/tmp')
    os.makedirs('data', exist_ok=True)

    app = Flask('evilprinter')
    view = IppView(Path('/tmp'), printer.repo)
    view.factory = EvilPrinterFactory(printer)
    app.register_blueprint(view.blueprint())
    thread = Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': port}, daemon=True)
    thread.start()
